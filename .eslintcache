[{"/home/sd17/Desktop/interim/huddll-tic-tac-toe/src/index.js":"1","/home/sd17/Desktop/interim/huddll-tic-tac-toe/src/App.js":"2","/home/sd17/Desktop/interim/huddll-tic-tac-toe/src/components/GameBox.js":"3"},{"size":454,"mtime":1608762513042,"results":"4","hashOfConfig":"5"},{"size":182,"mtime":1608762411280,"results":"6","hashOfConfig":"5"},{"size":5890,"mtime":1627237771717,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"idf24a",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/home/sd17/Desktop/interim/huddll-tic-tac-toe/src/index.js",[],["16","17"],"/home/sd17/Desktop/interim/huddll-tic-tac-toe/src/App.js",[],"/home/sd17/Desktop/interim/huddll-tic-tac-toe/src/components/GameBox.js",["18","19","20"],"import React, { useState, useEffect } from \"react\";\nimport { LazyMotion, domAnimation, motion } from \"framer-motion\";\n\nconst n = 3; //3x3 matrix/tic-tac-toe board\n\nconst GameBox = () => {\n  const [boxMatrix, setBoxMatrix] = useState([\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n  ]);\n\n  const [currentSymbol, setCurrentSymbol] = useState(\"x\");\n\n  const toggleSymbol = () => {\n    if (currentSymbol === \"x\") {\n      setCurrentSymbol(\"o\");\n    } else {\n      setCurrentSymbol(\"x\");\n    }\n  };\n\n  const resetGame = () => {\n    setBoxMatrix([\n      [null, null, null],\n      [null, null, null],\n      [null, null, null],\n    ]);\n\n    window.location.reload();\n  };\n\n  const winnerCheck = () => {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        try {\n          if (\n            new Set([boxMatrix[i][j], boxMatrix[i][j + 1], boxMatrix[i][j + 2]])\n              .size === 1 &&\n            boxMatrix[i][j] != null &&\n            typeof boxMatrix[i][j + 2] !== \"undefined\"\n          ) {\n            // console.log(`${boxMatrix[i][j]} wins 1`);\n            alert(`${boxMatrix[i][j]} wins the game`);\n            resetGame();\n            return;\n          }\n          if (\n            new Set([boxMatrix[i][j], boxMatrix[i + 1][j], boxMatrix[i + 2][j]])\n              .size === 1 &&\n            boxMatrix[i][j] != null &&\n            typeof boxMatrix[i + 2][j] !== \"undefined\"\n          ) {\n            // console.log(`${boxMatrix[i][j]} wins 2`);\n            alert(`${boxMatrix[i][j]} wins the game`);\n            resetGame();\n            return;\n          }\n          if (\n            new Set([\n              boxMatrix[i][i],\n              boxMatrix[i + 1][i + 1],\n              boxMatrix[i + 2][i + 2],\n            ]).size === 1 &&\n            boxMatrix[i][i] != null &&\n            typeof boxMatrix[i + 2][i + 2] !== \"undefined\"\n          ) {\n            // console.log(`${boxMatrix[i][j]} wins 3`);\n            alert(`${boxMatrix[i][j]} wins the game`);\n            resetGame();\n            return;\n          }\n          if (\n            new Set([\n              boxMatrix[i + 2][i],\n              boxMatrix[i + 1][i + 1],\n              boxMatrix[i][i + 2],\n            ]).size === 1 &&\n            boxMatrix[i + 1][i + 1] != null &&\n            typeof boxMatrix[i + 2][i + 2] !== \"undefined\"\n          ) {\n            // console.log(`${boxMatrix[i+1][i+1]} wins 4`);\n            alert(`${boxMatrix[i][j]} wins the game`);\n            resetGame();\n            return;\n          }\n          if (\n            !boxMatrix[i].includes(null) &&\n            !boxMatrix[i + 1].includes(null) &&\n            !boxMatrix[i + 2].includes(null)\n          ) {\n            alert(`Game was a draw`);\n            resetGame();\n            return;\n          }\n        } catch {\n          //do nothing\n        }\n      }\n    }\n  };\n\n  const onGameClick = (e) => {\n    const tempArray = [...boxMatrix];\n    tempArray[parseInt(e.target.id / 10) - 1][parseInt(e.target.id % 10) - 1] =\n      currentSymbol;\n    e.target.className =\n      currentSymbol === \"x\" ? \"x icon huge icon\" : \"circle outline huge icon\";\n    setBoxMatrix(tempArray);\n    toggleSymbol();\n    e.target.style.pointerEvents = \"none\";\n  };\n\n  useEffect(() => {\n    winnerCheck();\n  }, [boxMatrix, currentSymbol]);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ delay: 0.5 }}\n      className=\"center game-box\"\n    >\n      <h1 style={{ textAlign: \"center\" }}>Tic-Tac-Toe</h1>\n      <motion.div className=\"grid\">\n        <div className=\"row\">\n          <motion.div whileHover={{ opacity: 0.5 }} className=\"cell\">\n            <motion.i\n              id=\"11\"\n              onClick={onGameClick}\n              className=\"huge icon\"\n            ></motion.i>\n          </motion.div>\n          <motion.div whileHover={{ opacity: 0.5 }} className=\"cell\">\n            <motion.i\n              id=\"12\"\n              onClick={onGameClick}\n              className=\"huge icon\"\n            ></motion.i>\n          </motion.div>\n          <motion.div whileHover={{ opacity: 0.5 }} className=\"cell\">\n            <motion.i\n              id=\"13\"\n              onClick={onGameClick}\n              className=\"huge icon\"\n            ></motion.i>\n          </motion.div>\n        </div>\n        <div className=\"row\">\n          <motion.div whileHover={{ opacity: 0.5 }} className=\"cell\">\n            <motion.i\n              id=\"21\"\n              onClick={onGameClick}\n              className=\"huge icon\"\n            ></motion.i>\n          </motion.div>\n          <motion.div whileHover={{ opacity: 0.5 }} className=\"cell\">\n            <motion.i\n              id=\"22\"\n              onClick={onGameClick}\n              className=\"huge icon\"\n            ></motion.i>\n          </motion.div>\n          <motion.div whileHover={{ opacity: 0.5 }} className=\"cell\">\n            <motion.i\n              id=\"23\"\n              onClick={onGameClick}\n              className=\"huge icon\"\n            ></motion.i>\n          </motion.div>\n        </div>\n        <div className=\"row\">\n          <motion.div whileHover={{ opacity: 0.5 }} className=\"cell\">\n            <motion.i\n              id=\"31\"\n              onClick={onGameClick}\n              className=\"huge icon\"\n            ></motion.i>\n          </motion.div>\n          <motion.div whileHover={{ opacity: 0.5 }} className=\"cell\">\n            <motion.i\n              id=\"32\"\n              onClick={onGameClick}\n              className=\"huge icon\"\n            ></motion.i>\n          </motion.div>\n          <motion.div whileHover={{ opacity: 0.5 }} className=\"cell\">\n            <motion.i\n              id=\"33\"\n              onClick={onGameClick}\n              className=\"huge icon\"\n            ></motion.i>\n          </motion.div>\n        </div>\n      </motion.div>\n    </motion.div>\n  );\n};\n\nexport default GameBox;\n",{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":2,"column":10,"nodeType":"27","messageId":"28","endLine":2,"endColumn":20},{"ruleId":"25","severity":1,"message":"29","line":2,"column":22,"nodeType":"27","messageId":"28","endLine":2,"endColumn":34},{"ruleId":"30","severity":1,"message":"31","line":116,"column":6,"nodeType":"32","endLine":116,"endColumn":32,"suggestions":"33"},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-unused-vars","'LazyMotion' is defined but never used.","Identifier","unusedVar","'domAnimation' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'winnerCheck'. Either include it or remove the dependency array.","ArrayExpression",["36"],"no-global-assign","no-unsafe-negation",{"desc":"37","fix":"38"},"Update the dependencies array to be: [boxMatrix, currentSymbol, winnerCheck]",{"range":"39","text":"40"},[3281,3307],"[boxMatrix, currentSymbol, winnerCheck]"]